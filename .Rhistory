# e.g. Creating a list with 4 elements, and then using lapply return with the sums
theList <- list(A=matrix(1:9, 3), B=1:5, C=matrix(1:4, 2), D=2)
theList
lapply(theList, sum)
# Now using map(), it can also generate the same result.
library(purrr)
theList %>% map(sum)
# Note: If one of the elements is missing (NA), we need to specify dropping the missing element from the calculation
# using na.rm=TRUE
theList2 <- theList
theList2[[1]][2,1] <- NA
theList2[[2]][4] <- NA
# The return list has two NA values because the elements were missing (NA) in the original list
theList2 %>% map(sum)
# We can pack anonymous function function(x) with na.rm=TRUE inside the map() function
thelist2 %>% map(function(x) sum(x, na,rm=TRUE))
# We can pack anonymous function function(x) with na.rm=TRUE inside the map() function
theList2 %>% map(function(x) sum(x, na,rm=TRUE))
# We can pack anonymous function function(x) with na.rm=TRUE inside the map() function
theList2 %>% map(function(x) sum(x, na.rm=TRUE))
# An alternative is to pass in the na.rm=TRUE with sum within the map() function
theList2 %>% map(sum, na.rm=TRUE)
# e.g. suppose we are trying to get the count of row from each element in the list.
theList %>% map_int(NROW)
# If we use map_int() to get the mean of each element in the list, it will cause an error
# because mean will return a numeric, not an interger.
theList %>% map_int(mean)
# To correct it, we can use map_dbl to return a numeric value from mean
theList %>% map_dbl(mean)
# For returning character, use map_chr()
theList %>% map_chr(class)
# One problem is that what if an element contain multiple data type.
# Suppose we are adding a new element to the list, which is combining A, B, and C elements
theList3 <- theList
theList3[['E']] <- factor(c('A', 'B', 'C'), ordered=TRUE)
class(theList3$E)
# Using the map_chr(class) will cause an error because the return from element "E" is not an atomic vector.
theList3 %>% map_chr(class)
# The most direct way to resolve this issue is using map() return a list of element.
# However, the return result will not be an vector, but a list.
theList3 %>% map(class)
# Logical operation can be return from map_lgl() in a logical vector
theList %>% map_lgl(function(x) NROW(x) < 3)
# map_df() returns data frames created by row-binding and column-binding respectively
# Suppose we have a function that create two columns data frame and
# the number of rows in the data frame depends on varaible x
buildDF <- function(x){
data.frame(A=1:x, B=X:1)
}
# We can use map() return a list with 4 elements and each element is a data frame with length defined
listOfLengths %>% map(buildDF)
listOfLengths <- list(3, 4, 1, 5)
# We can use map() return a list with 4 elements and each element is a data frame with length defined
listOfLengths %>% map(buildDF)
# map_df() returns data frames created by row-binding and column-binding respectively
# Suppose we have a function that create two columns data frame and
# the number of rows in the data frame depends on varaible x
buildDF <- function(x){
data.frame(A=1:x, B=x:1)
}
listOfLengths <- list(3, 4, 1, 5)
# We can use map() return a list with 4 elements and each element is a data frame with length defined
listOfLengths %>% map(buildDF)
# Obviously, it would be more intuitive to have the result return in one single data frame in this case
listOflengths %>% map_df(buildDF)
# Obviously, it would be more intuitive to have the result return in one single data frame in this case
listOfLengths %>% map_df(buildDF)
# Sometime, we only want to map the a list if certain condition is met.
# In such case, map_if() function allows use to define the condition before mapping.
# e.g. suppose we are only interested to mulitply the matrices in the list by 2 (Scalar Multiplication)
theList %>% map_if(is.matrix, function(x) x*2)
# purrr package provides an alternative to pass in a formula to replace the anonymous function.
theList %>% map_if(is.matrix, ~ .x*2)
# Techically, a data frame should also be defined as list.
# Therefore, we can also apply the map() function to a data frame.
# e.g. suppose we are interested to get the mean values from the diamonds data frame
data(diamonds, package=='ggplot2')
# Techically, a data frame should also be defined as list.
# Therefore, we can also apply the map() function to a data frame.
# e.g. suppose we are interested to get the mean values from the diamonds data frame
data(diamonds, package=='ggplot2')
# Techically, a data frame should also be defined as list.
# Therefore, we can also apply the map() function to a data frame.
# e.g. suppose we are interested to get the mean values from the diamonds data frame
data(diamonds, package='ggplot2')
diamonds %>% map_dbl(mean)
library(dplyr)
diamonds %>% summarize_each(funs(mean))
# In purrr package, pmap() and map2() can be apply in a two arguments case.
# e.g.
firstList <- list(A=matrix(1:16, 4), B=matrix(1:16, 2), C=1:5)
secondList <- list(A=matrix(1:16, 4), B=matrix(1:16, 8), C=15:1)
# Create a function that adds the number of rows from two elements
simpleFunc <- function(x, y){
NROW(x) + NROW(y)
}
# Apply the simpleFunc() to the two lists by using map2()
# Note: we are dealing with two arguments here firstList and secondList
map2(firstList, secondList, simpleFunc)
# We can also return the results with interger
map2_int(firstList, secondList, simpleFunc)
# More general, pmap can process a list of lists and return with a list.
pmap(list(firstList, secondList), simpleFunc)
pmap_int(list(firstList, secondList), simpleFunc)
