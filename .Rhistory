# e.g. Creating a list with 4 elements, and then using lapply return with the sums
theList <- list(A=matrix(1:9, 3), B=1:5, C=matrix(1:4, 2), D=2)
theList
lapply(theList, sum)
# Now using map(), it can also generate the same result.
library(purrr)
theList %>% map(sum)
# Note: If one of the elements is missing (NA), we need to specify dropping the missing element from the calculation
# using na.rm=TRUE
theList2 <- theList
theList2[[1]][2,1] <- NA
theList2[[2]][4] <- NA
# The return list has two NA values because the elements were missing (NA) in the original list
theList2 %>% map(sum)
# We can pack anonymous function function(x) with na.rm=TRUE inside the map() function
thelist2 %>% map(function(x) sum(x, na,rm=TRUE))
# We can pack anonymous function function(x) with na.rm=TRUE inside the map() function
theList2 %>% map(function(x) sum(x, na,rm=TRUE))
# We can pack anonymous function function(x) with na.rm=TRUE inside the map() function
theList2 %>% map(function(x) sum(x, na.rm=TRUE))
# An alternative is to pass in the na.rm=TRUE with sum within the map() function
theList2 %>% map(sum, na.rm=TRUE)
# e.g. suppose we are trying to get the count of row from each element in the list.
theList %>% map_int(NROW)
# If we use map_int() to get the mean of each element in the list, it will cause an error
# because mean will return a numeric, not an interger.
theList %>% map_int(mean)
# To correct it, we can use map_dbl to return a numeric value from mean
theList %>% map_dbl(mean)
# For returning character, use map_chr()
theList %>% map_chr(class)
# One problem is that what if an element contain multiple data type.
# Suppose we are adding a new element to the list, which is combining A, B, and C elements
theList3 <- theList
theList3[['E']] <- factor(c('A', 'B', 'C'), ordered=TRUE)
class(theList3$E)
# Using the map_chr(class) will cause an error because the return from element "E" is not an atomic vector.
theList3 %>% map_chr(class)
# The most direct way to resolve this issue is using map() return a list of element.
# However, the return result will not be an vector, but a list.
theList3 %>% map(class)
# Logical operation can be return from map_lgl() in a logical vector
theList %>% map_lgl(function(x) NROW(x) < 3)
# map_df() returns data frames created by row-binding and column-binding respectively
# Suppose we have a function that create two columns data frame and
# the number of rows in the data frame depends on varaible x
buildDF <- function(x){
data.frame(A=1:x, B=X:1)
}
# We can use map() return a list with 4 elements and each element is a data frame with length defined
listOfLengths %>% map(buildDF)
listOfLengths <- list(3, 4, 1, 5)
# We can use map() return a list with 4 elements and each element is a data frame with length defined
listOfLengths %>% map(buildDF)
# map_df() returns data frames created by row-binding and column-binding respectively
# Suppose we have a function that create two columns data frame and
# the number of rows in the data frame depends on varaible x
buildDF <- function(x){
data.frame(A=1:x, B=x:1)
}
listOfLengths <- list(3, 4, 1, 5)
# We can use map() return a list with 4 elements and each element is a data frame with length defined
listOfLengths %>% map(buildDF)
# Obviously, it would be more intuitive to have the result return in one single data frame in this case
listOflengths %>% map_df(buildDF)
# Obviously, it would be more intuitive to have the result return in one single data frame in this case
listOfLengths %>% map_df(buildDF)
# Sometime, we only want to map the a list if certain condition is met.
# In such case, map_if() function allows use to define the condition before mapping.
# e.g. suppose we are only interested to mulitply the matrices in the list by 2 (Scalar Multiplication)
theList %>% map_if(is.matrix, function(x) x*2)
# purrr package provides an alternative to pass in a formula to replace the anonymous function.
theList %>% map_if(is.matrix, ~ .x*2)
# Techically, a data frame should also be defined as list.
# Therefore, we can also apply the map() function to a data frame.
# e.g. suppose we are interested to get the mean values from the diamonds data frame
data(diamonds, package=='ggplot2')
# Techically, a data frame should also be defined as list.
# Therefore, we can also apply the map() function to a data frame.
# e.g. suppose we are interested to get the mean values from the diamonds data frame
data(diamonds, package=='ggplot2')
# Techically, a data frame should also be defined as list.
# Therefore, we can also apply the map() function to a data frame.
# e.g. suppose we are interested to get the mean values from the diamonds data frame
data(diamonds, package='ggplot2')
diamonds %>% map_dbl(mean)
library(dplyr)
diamonds %>% summarize_each(funs(mean))
# In purrr package, pmap() and map2() can be apply in a two arguments case.
# e.g.
firstList <- list(A=matrix(1:16, 4), B=matrix(1:16, 2), C=1:5)
secondList <- list(A=matrix(1:16, 4), B=matrix(1:16, 8), C=15:1)
# Create a function that adds the number of rows from two elements
simpleFunc <- function(x, y){
NROW(x) + NROW(y)
}
# Apply the simpleFunc() to the two lists by using map2()
# Note: we are dealing with two arguments here firstList and secondList
map2(firstList, secondList, simpleFunc)
# We can also return the results with interger
map2_int(firstList, secondList, simpleFunc)
# More general, pmap can process a list of lists and return with a list.
pmap(list(firstList, secondList), simpleFunc)
pmap_int(list(firstList, secondList), simpleFunc)
library(ggplot2)
data(diamonds)
head(diamonds)
# Basic Histogram in base R
# Histogram is the most fundamental graphic tools to show the distribution of a quantitative data.
# Base R provides this very easy way to plot the histogram with hist() function.
# e.g. Suppose we are plotting the histrogram for the quantitative column "carat" from the diamonds tbl.
hist(diamonds$carat, main='Carat Histogram', xlab='Carat')
# Scatter Plot in base R
# Scatter plot is a very useful tool to compare two sets of quantitative data.
# e.g. We can use "formula" to plot the diamond price against carat.
plot(price ~ carat, data=diamonds)
# It is not necessary to use "formula" for a scatter plot,
plot(diamonds$price, diamonds$carat)
# It is not necessary to use "formula" for a scatter plot,
plot(diamonds$carat, diamonds$price)
boxplot(diamonds$carat)
# Histogram in ggplot2
# e.g. Using ggplot2 for plotting the histogram for numerical data 'Carat' in the diamonds data set.
ggplot(data=diamonds) + geom_histogram(aes(x=carat))
# Similar to histrogram, we can easily plot the density distribution with geom_density().
ggplot(data=diamonds) + geom_density(ase(x=carat))
# Similar to histrogram, we can easily plot the density distribution with geom_density().
ggplot(data=diamonds) + geom_density(aes(x=carat))
# Similar to histrogram, we can easily plot the density distribution with geom_density().
ggplot(data=diamonds) + geom_density(aes(x=carat), fill='grey50')
# Scatter Plot in ggplot2
# e.g. Plot the diamond price and carat within a scatter plot
# This time we are including the aes() in the ggplot() function, but not in the geom()
ggplot(diamonds, aes(x=carat, y=price)) + geom_point()
# We are going to repeat using "ggplot(diamonds, aes(x=carat, y=price))", so we save it into a variable "g".
g <- ggplot(diamonds, aes(x=carat, y=price))
# Suppose we would like to identify the colors of the diamond in the graph with different color codes.
g + geom_point(aes(color=color))
# For instance, if we are interested to split each color grade into its own price vs. carat scatter plot.
g + geom_point(aes(color=color)) + facet_wrap(~color)
# Or, if we want to splite the scatter plots into different combinations of "cut" and "clarity" grade.
g + geom_point(aes(color=color)) + facet_grid(cut~clarity)
# Note: Both facet_wrap() and facet_grid() can be applied to any geom() functions.
# e.g. We can use facet_wrap() to plot the histrogram for carat in different color grade.
ggplot(diamonds, aes(x=carat)) + geom_histogram() + facet_wrap(~color)
# Box Plot in ggplot2
# ggpot2 provides a more complete and intuitive features to the box plot graphic
# e.g. Plotting the box plot for carat
ggplot(diamonds, aes(y=carat, x=1)) + geom_boxplot()
# In ggplot2, we can easily extend the boxplot into different classes by defining a categorical data
# e.g. we can divide the box plot for carat by the cut grade
ggplot(diamonds, aes(y=carat, x=cut)) + geo_boxplot()
# In ggplot2, we can easily extend the boxplot into different classes by defining a categorical data
# e.g. we can divide the box plot for carat by the cut grade
ggplot(diamonds, aes(y=carat, x=cut)) + geom_boxplot()
# In a more specific case, we can change the box plot into a violin plot
ggplot(diamonds, aes(y=carat, x=cut)) + geom_violin()
# Line Graph in ggplot2
# Line graph is usually applied to express the time series data.
# We are using the economics data set from ggplot2 package to demonstrate the use of line graph with date.
ggplot(economics, aes(x=date, y=pop)) + geom_line()
# Suppose we are trying to break the data into year and plot into the same graph.
# We can use the lubridate package to help us on this task.
library(lubridate)
# Let's save the data in or beyond 2000 to an object "econ2000"
econ2000 <- economics[which(economics$year >= 2000),]
# Build year and month variables
economics$year <- year(economics$date)
# The argument label=TRUE means to return month by its name, not a numeric value
economics$month <- month(economics$date, label=TRUE)
# Let's save the data in or beyond 2000 to an object "econ2000"
econ2000 <- economics[which(economics$year >= 2000),]
# We can use scales package to give better format to the graph
library(scales)
# Build the base of the line graph
g <- ggplot(econ2000, aes(x=month, y=pop))
# Defind different colors for different years.
# Use argument group to group the data into different year.
g <- g +geom_line(aes(color=factor(year), group=year))
# Define the color by the given "Year"
g <- g + scale_color_discrete(name="Year")
# Format the y-axis
g <- g + scale_y_continuous(labels=comma)
# Adding the title, x-axis, and y-axis to the graph
g <- g + labs(title="Population Growth", x="Month", y="Population")
g
# Themes in ggplot2
# Another big advantage using ggplot2 is that the package provides users variety of theme options.
# e.g. "The Economist", "Excel", "Edward Tufte", and "The Wall Street Journal"
# To access the themes, we need to load the ggthemes library package.
library(ggthemes)
# Themes in ggplot2
# Another big advantage using ggplot2 is that the package provides users variety of theme options.
# e.g. "The Economist", "Excel", "Edward Tufte", and "The Wall Street Journal"
# To access the themes, we need to load the ggthemes library package.
install.packages(ggthemes)
# Themes in ggplot2
# Another big advantage using ggplot2 is that the package provides users variety of theme options.
# e.g. "The Economist", "Excel", "Edward Tufte", and "The Wall Street Journal"
# To access the themes, we need to load the ggthemes library package.
install.packages("ggthemes")
library(ggthemes)
# e.g. Plot the scatter plot in different themes.
g2 <- ggplot(diamonds, aes(x=carat, y=price)) +
geom_point(aes(color=color))
g2 + theme_economist + scale_colour_economist()
g2 + theme_economist + scale_color_economist()
g2 + theme_excel() + scale_color_excel()
g2 + theme_tufte()
g2 + theme_wsj()
g2 + theme_economist() + scale_color_economist()
# The lattice package, written by Deepayan Sarkar, attempts to improve on base R graphics
# by providing better defaults and the ability to easily display multivariate relationships.
library(lattice)
# Histogram with lattice
histogram(~ diamonds$carat,
main="Histogram",
xlab="Carat")
# Histogram with lattice
histogram(~ diamonds$carat,
type="count"
main="Histogram",
xlab="Carat")
# Histogram with lattice
histogram(~ diamonds$carat,
type="count",
main="Histogram",
xlab="Carat")
# Scatter Plot with lattice
xyplot(price~carat,
data=diamonds,
main="Scatterplots by Price and Carat",
xlab="Carat",
ylab="Price")
# Box Plot with lattice
bwplot(~carat,
data=diamonds,
main="Box Plot for Carat",
ylab="Carat")
# Box Plot with lattice
bwplot(carat,
data=diamonds,
main="Box Plot for Carat",
ylab="Carat")
# Box Plot with lattice
bwplot(carat~,
data=diamonds,
main="Box Plot for Carat",
ylab="Carat")
# Box Plot with lattice
bwplot(carat~1,
data=diamonds,
main="Box Plot for Carat",
ylab="Carat")
# Box Plot with lattice
bwplot(carat,
data=diamonds,
main="Box Plot for Carat",
ylab="Carat")
# Box Plot with lattice
bwplot(carat,
data=diamonds,
main="Box Plot for Carat",
ylab="Carat")
# Box Plot with lattice
bwplot(diamonds$carat,
main="Box Plot for Carat",
ylab="Carat")
# Suppose we are interested to the boxplot for carat in different cut grade
bwplot(carat~cut,
data=diamonds,
main="Boxplot for Carat by Cut",
xlab="Cut",
ylab='Carat')
# Box Plot with lattice
bwplot(diamonds$carat,
main="Boxplot for Carat",
ylab="Carat",
horizontal=FALSE)
# Box Plot with lattice
bwplot(diamonds$carat,
main="Boxplot for Carat",
ylab="Carat",
horizontal=TRUE)
# We can also generate the violin plot like in ggplot2 package
bwplot(carat~cut,
data=diamonds,
main="Boxplot for Carat by Cut",
xlab="Cut",
ylab='Carat',
panel=panel.violin)
